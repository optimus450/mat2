#q1

import matplotlib.pyplot as plt
import numpy as np

# Define the grid
x1 = np.linspace(0, 10, 400)
x2 = np.linspace(0, 10, 400)
X1, X2 = np.meshgrid(x1, x2)

# Constraints
constraints = [
    (X1 + 2*X2 <= 10),
    (X1 + X2 <= 6),
    (X1 - X2 <= 2),
    (X1 - 2*X2 <= 1),
    (X1 >= 0),
    (X2 >= 0)
]

# Feasible region (all constraints satisfied)
feasible_region = np.logical_and.reduce(constraints)

# Objective function Z = 2x1 + x2
Z = 2*X1 + X2

# Mask infeasible points
Z_feasible = np.where(feasible_region, Z, np.nan)

# Plotting
plt.figure(figsize=(10, 6))
contour = plt.contourf(X1, X2, Z_feasible, levels=50)
plt.colorbar(contour, label='Objective Function Value (Z)')

# Plot constraints
plt.plot(x1, (10 - x1) / 2, label='x1 + 2x2 ≤ 10')
plt.plot(x1, 6 - x1, label='x1 + x2 ≤ 6')
plt.plot(x1, x1 - 2, label='x1 - x2 ≤ 2')
plt.plot(x1, (x1 - 1) / 2, label='x1 - 2x2 ≤ 1')
plt.xlim((0, 5))
plt.ylim((0, 5))
plt.xlabel('x1')
plt.ylabel('x2')
plt.title('Feasible Region and Objective Function (Z = 2x1 + x2)')
plt.legend()

# Calculate vertices manually and evaluate Z at each
points = [
    (0, 0),
    (0, 3),         # From x1 + 2x2 = 10 and x1 = 0
    (2, 4),         # From x1 + 2x2 = 10 and x1 - x2 = 2
    (4, 2),         # From x1 + x2 = 6 and x1 - x2 = 2
    (3, 3),         # From x1 + x2 = 6 and x1 - 2x2 = 1
    (4, 0),         # From x1 - 2x2 = 1 and x2 = 0
]

points = np.array(points)
z_values = 2 * points[:, 0] + points[:, 1]
max_index = np.argmax(z_values)
optimal_point = points[max_index]
optimal_value = z_values[max_index]

# Plot feasible points
# for i, (x, y) in enumerate(points):
#     if z_values[i]==optimal_value :
#         break 
#     plt.plot(x, y, 'ro')
#     plt.text(x + 0.1, y, f'Z={z_values[i]:.1f}', fontsize=9)

# Highlight optimal point
plt.plot(optimal_point[0], optimal_point[1], 'bo', markersize=5)
plt.text(optimal_point[0] + 0.2, optimal_point[1], f'Max Z={optimal_value}', fontsize=10, color='black')

plt.grid(True)
plt.show(), optimal_point, optimal_value


#Q2
from scipy.optimize import linprog
c = [45, 40, 85, 65]  
A = [
    [-3, -4, -8, -6],  
    [-2, -2, -7, -5],  
    [-6, -4, -7, -4]   
]
b = [-800, -200, -700]
bounds = [(0, None), (0, None), (0, None), (0, None)]  
result = linprog(c, A_ub=A, b_ub=b, bounds=bounds, method='highs')
if result.success:
    print("Optimal Diet Mix:")
    print(f"Food 1: {result.x[0]:.2f} units")
    print(f"Food 2: {result.x[1]:.2f} units")
    print(f"Food 3: {result.x[2]:.2f} units")
    print(f"Food 4: {result.x[3]:.2f} units")
    print(f"Minimum Cost: BDT {result.fun:.2f}")
else:
    print("No feasible solution found.")


#simplex
import numpy as np

def print_tableau(tableau, basic_vars, var_names, step):
    print(f"\n Step {step} - Tableau:")
    header = var_names + ["RHS"]
    row_labels = basic_vars + ["-Z"]

    # Print header
    print("       " + "  ".join(f"{name:>6}" for name in header))
    for i, row in enumerate(tableau):
        row_str = "  ".join(f"{val:>6.2f}" for val in row)
        print(f"{row_labels[i]:>5} | {row_str}")
    print("-" * 70)

def simplex(c, A, b):
    A = np.array(A, dtype=float)
    b = np.array(b, dtype=float)
    c = np.array(c, dtype=float)

    m, n = A.shape
    var_names = [f"x{i+1}" for i in range(n)] + [f"s{i+1}" for i in range(m)]
    basic_vars = [f"s{i+1}" for i in range(m)]

    tableau = np.zeros((m+1, n+m+1))
    tableau[:m, :n] = A
    tableau[:m, n:n+m] = np.eye(m)
    tableau[:m, -1] = b
    tableau[-1, :n] = -c

    step = 0
    print_tableau(tableau, basic_vars, var_names, step)

    while any(tableau[-1, :-1] < 0):
        step += 1
        pivot_col = np.argmin(tableau[-1, :-1])
        ratios = [row[-1] / row[pivot_col] if row[pivot_col] > 0 else float('inf') for row in tableau[:-1]]
        pivot_row = np.argmin(ratios)

        # Normalize the pivot row
        tableau[pivot_row] /= tableau[pivot_row, pivot_col]

        # Eliminate other rows
        for i in range(len(tableau)):
            if i != pivot_row:
                tableau[i] -= tableau[i, pivot_col] * tableau[pivot_row]

        basic_vars[pivot_row] = var_names[pivot_col]
        print_tableau(tableau, basic_vars, var_names, step)

    solution = np.zeros(n)
    for i, var in enumerate(basic_vars):
        if var in var_names[:n]:
            solution[var_names.index(var)] = tableau[i, -1]

    max_profit = tableau[-1, -1]
    return solution, max_profit

# Input
c = [12, 15, 14]
A = [
    [3, 2, 5],
    [2, 4, 3],
    [1, 1, 1]
]
b = [3, 3, 100]

# Solve
solution, max_profit = simplex(c, A, b)

# Output
print("\n Final Solution:")
print(f"Coal A: {solution[0]:.3f} tons")
print(f"Coal B: {solution[1]:.3f} tons")
print(f"Coal C: {solution[2]:.3f} tons")
print(f"Maximum Profit: BDT {max_profit:.3f}")



#salesman

import numpy as np

def hungarian_algorithm(matrix):
    matrix = matrix.copy()
    
    # Step 1: Row reduction
    for i in range(matrix.shape[0]):
        matrix[i] -= matrix[i].min()
    
    # Step 2: Column reduction
    for j in range(matrix.shape[1]):
        matrix[:, j] -= matrix[:, j].min()

    # Step 3: Cover all zeros using a minimum number of lines
    def cover_zeros(m):
        n = len(m)
        covered_rows = set()
        covered_cols = set()
        zero_locations = np.argwhere(m == 0).tolist()
        marked_zeros = []

        while zero_locations:
            row_count = [0] * n
            col_count = [0] * n
            for r, c in zero_locations:
                row_count[r] += 1
                col_count[c] += 1

            if max(row_count) >= max(col_count):
                r = row_count.index(max(row_count))
                for z in zero_locations:
                    if z[0] == r:
                        marked_zeros.append(z)
                zero_locations = [z for z in zero_locations if z[0] != r]
                covered_rows.add(r)
            else:
                c = col_count.index(max(col_count))
                for z in zero_locations:
                    if z[1] == c:
                        marked_zeros.append(z)
                zero_locations = [z for z in zero_locations if z[1] != c]
                covered_cols.add(c)

        return len(covered_rows) + len(covered_cols), covered_rows, covered_cols

    # Step 4: Test for optimality
    def is_optimal(matrix):
        lines, _, _ = cover_zeros(matrix)
        return lines >= matrix.shape[0]

    # Step 5: Adjust the matrix if not optimal
    while not is_optimal(matrix):
        _, covered_rows, covered_cols = cover_zeros(matrix)
        uncovered = [(i, j) for i in range(matrix.shape[0]) for j in range(matrix.shape[1])
                     if i not in covered_rows and j not in covered_cols]
        if not uncovered:
            break
        min_uncovered = min(matrix[i][j] for i, j in uncovered)
        for i in range(matrix.shape[0]):
            for j in range(matrix.shape[1]):
                if i not in covered_rows and j not in covered_cols:
                    matrix[i][j] -= min_uncovered
                elif i in covered_rows and j in covered_cols:
                    matrix[i][j] += min_uncovered

    # Step 6: Find final assignment
    assignment = []
    temp = matrix.copy()
    while len(assignment) < matrix.shape[0]:
        zero_pos = list(zip(*np.where(temp == 0)))
        for r, c in zero_pos:
            if r not in [x[0] for x in assignment] and c not in [x[1] for x in assignment]:
                assignment.append((r, c))
                temp[r, :] = -1
                temp[:, c] = -1
                break

    return assignment

# Original profit matrix
profit_matrix = np.array([
    [16, 10, 14, 11],
    [14, 11, 15, 15],
    [15, 15, 13, 12],
    [13, 12, 14, 15]
])

# Convert to cost matrix
max_val = np.max(profit_matrix)
cost_matrix = max_val - profit_matrix

# Solve using manual Hungarian Algorithm
assignments = hungarian_algorithm(cost_matrix)

# Output results
total_profit = 0
print("Assignments:")
for r, c in assignments:
    profit = profit_matrix[r][c]
    total_profit += profit
    print(f"Salesman {chr(65 + r)} -> City {c + 1} (Profit: {profit})")

print(f"\nTotal Maximum Profit: {total_profit}")
